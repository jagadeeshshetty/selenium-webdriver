{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2020-08-03T17:23:11.188Z",
    "end": "2020-08-03T17:23:31.349Z",
    "duration": 20161,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b30d74d9-828d-4bef-8718-b305fae9e53f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook",
          "fullTitle": "\"before each\" hook",
          "timedOut": false,
          "duration": 478,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const testName = this.currentTest.fullTitle();\nthis.driver = await driverFactory.build(testName);",
          "err": {},
          "uuid": "f0ecbb72-3c78-40e8-ac37-428d047a8f7f",
          "parentUUID": "b30d74d9-828d-4bef-8718-b305fae9e53f",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook",
          "fullTitle": "\"after each\" hook",
          "timedOut": false,
          "duration": 53,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (this.currentTest.state === 'failed') {\n    let fileName = (this.currentTest.title + '-' + new Date().getTime()).replace(/\\s+/g, '-') + '.jpg';\n    let dir = await path.join(__dirname, '..', 'mochawesome-report', 'screenshots');\n    if (!fs.existsSync(dir)) {\n        await fs.mkdirSync(dir);\n    }\n    await fs.writeFileSync(await path.join(dir, fileName), await this.driver.takeScreenshot(), 'base64');\n    await addContext(this, await path.join(__dirname, '..', 'mochawesome-report', 'screenshots', fileName));\n}\nawait driverFactory.quit();",
          "err": {},
          "uuid": "767192f8-951f-4018-8972-da2e6d6741e1",
          "parentUUID": "b30d74d9-828d-4bef-8718-b305fae9e53f",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "0a95ffef-6480-40da-8dd5-5ec5f585309c",
          "title": "Verify Dynamic Loading",
          "fullFile": "/Users/jc/selenium-webdriver-demo/test/DynamicLoadingTest.js",
          "file": "/test/DynamicLoadingTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Verify Dynamic Loading \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dynamicLoading = new DynamicLoadingPage(this.driver);",
              "err": {},
              "uuid": "e959f770-852f-46a3-9a25-876b929beca9",
              "parentUUID": "0a95ffef-6480-40da-8dd5-5ec5f585309c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "hidden element",
              "fullTitle": "Verify Dynamic Loading hidden element",
              "timedOut": false,
              "duration": 8997,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dynamicLoading.loadExample('1');\nassert(await dynamicLoading.isFinishTextPresent(), true, 'Finish text not displayed.');",
              "err": {},
              "uuid": "08f4bb90-19c3-4c12-8ce7-378fefeb7839",
              "parentUUID": "0a95ffef-6480-40da-8dd5-5ec5f585309c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08f4bb90-19c3-4c12-8ce7-378fefeb7839"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8997,
          "root": false,
          "rootEmpty": false,
          "_timeout": 48000
        },
        {
          "uuid": "7d606086-7c33-4bc3-a3bf-ac8ef51afa54",
          "title": "Verify Login",
          "fullFile": "/Users/jc/selenium-webdriver-demo/test/loginTest.js",
          "file": "/test/loginTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Verify Login \"before each\" hook",
              "timedOut": false,
              "duration": 3204,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login = new LoginPage(this.driver);\nawait login.load();",
              "err": {},
              "uuid": "40a1b023-750b-4c56-902a-2cf4cf79ffbb",
              "parentUUID": "7d606086-7c33-4bc3-a3bf-ac8ef51afa54",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "with valid credentials",
              "fullTitle": "Verify Login with valid credentials",
              "timedOut": false,
              "duration": 1081,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.authenticate('tomsmith', 'SuperSecretPassword!');\nassert(await login.successMessagePresent(), 'Success message not displayed');",
              "err": {},
              "uuid": "6b86b1e7-5c0f-42e4-9790-006c7ab9add7",
              "parentUUID": "7d606086-7c33-4bc3-a3bf-ac8ef51afa54",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with invalid credentials",
              "fullTitle": "Verify Login with invalid credentials",
              "timedOut": false,
              "duration": 1159,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.authenticate('invalid', 'invalid')\nassert(await login.failureMessagePresent(), 'Failure message not displayed');",
              "err": {},
              "uuid": "b8ca1422-d541-4f93-b071-d603c91440b7",
              "parentUUID": "7d606086-7c33-4bc3-a3bf-ac8ef51afa54",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b86b1e7-5c0f-42e4-9790-006c7ab9add7",
            "b8ca1422-d541-4f93-b071-d603c91440b7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2240,
          "root": false,
          "rootEmpty": false,
          "_timeout": 48000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 48000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}