{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2020-08-15T17:55:27.281Z",
    "end": "2020-08-15T17:56:02.796Z",
    "duration": 35515,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "ba082c03-52a9-4a66-af3a-e0f75e9c65c6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before each\" hook",
          "fullTitle": "\"before each\" hook",
          "timedOut": false,
          "duration": 3458,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "const testName = this.currentTest.fullTitle();\nthis.driver = await driverFactory.build(testName);",
          "err": {},
          "uuid": "23449826-afae-4041-b032-71a17e05c6d5",
          "parentUUID": "ba082c03-52a9-4a66-af3a-e0f75e9c65c6",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after each\" hook",
          "fullTitle": "\"after each\" hook",
          "timedOut": false,
          "duration": 1514,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "if (this.currentTest.state === 'failed') {\n    let fileName = (this.currentTest.title + '-' + new Date().getTime()).replace(/\\s+/g, '-') + '.jpg';\n    let dir = await path.join(__dirname, '..', 'mochawesome-report', 'screenshots');\n    if (!fs.existsSync(dir)) {\n        await fs.mkdirSync(dir);\n    }\n    await fs.writeFileSync(await path.join(dir, fileName), await this.driver.takeScreenshot(), 'base64');\n    await addContext(this, await path.join(__dirname, '..', 'mochawesome-report', 'screenshots', fileName));\n}\nawait driverFactory.quit();",
          "err": {},
          "uuid": "4d196f88-4d39-49ff-8032-bc8c7d54af9e",
          "parentUUID": "ba082c03-52a9-4a66-af3a-e0f75e9c65c6",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "05b9f48e-351c-4300-b9d7-6245fcb0bab9",
          "title": "Verify Dynamic Loading",
          "fullFile": "/Users/jc/selenium-webdriver-demo/test/DynamicLoadingTest.js",
          "file": "/test/DynamicLoadingTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Verify Dynamic Loading \"before each\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "dynamicLoading = new DynamicLoadingPage(this.driver);",
              "err": {},
              "uuid": "98eeeed2-f784-491d-8650-ce18c0d7b533",
              "parentUUID": "05b9f48e-351c-4300-b9d7-6245fcb0bab9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "hidden element",
              "fullTitle": "Verify Dynamic Loading hidden element",
              "timedOut": false,
              "duration": 8650,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await dynamicLoading.loadExample('1');\nassert(await dynamicLoading.isFinishTextPresent(), true, 'Finish text not displayed.');",
              "err": {},
              "uuid": "b58705b4-3a05-421f-90ed-f374a7f1b8c9",
              "parentUUID": "05b9f48e-351c-4300-b9d7-6245fcb0bab9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b58705b4-3a05-421f-90ed-f374a7f1b8c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8650,
          "root": false,
          "rootEmpty": false,
          "_timeout": 48000
        },
        {
          "uuid": "e06a01cf-0c76-4a30-9b38-337678d5673f",
          "title": "Verify Login",
          "fullFile": "/Users/jc/selenium-webdriver-demo/test/loginTest.js",
          "file": "/test/loginTest.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook",
              "fullTitle": "Verify Login \"before each\" hook",
              "timedOut": false,
              "duration": 3413,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login = new LoginPage(this.driver);\nawait login.load();",
              "err": {},
              "uuid": "5d3c4d30-f578-450c-bbea-f8adc0bd7e01",
              "parentUUID": "e06a01cf-0c76-4a30-9b38-337678d5673f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "with valid credentials",
              "fullTitle": "Verify Login with valid credentials",
              "timedOut": false,
              "duration": 1112,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.authenticate('tomsmith', 'SuperSecretPassword!');\nassert(await login.successMessagePresent(), 'Success message not displayed');",
              "err": {},
              "uuid": "0239141c-ee31-445f-9728-51af197e6e8a",
              "parentUUID": "e06a01cf-0c76-4a30-9b38-337678d5673f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "with invalid credentials",
              "fullTitle": "Verify Login with invalid credentials",
              "timedOut": false,
              "duration": 1143,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await login.authenticate('invalid', 'invalid')\nassert(await login.failureMessagePresent(), 'Failure message not displayed');",
              "err": {},
              "uuid": "31325e9a-8224-4667-84d2-5bde73ea1e00",
              "parentUUID": "e06a01cf-0c76-4a30-9b38-337678d5673f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0239141c-ee31-445f-9728-51af197e6e8a",
            "31325e9a-8224-4667-84d2-5bde73ea1e00"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2255,
          "root": false,
          "rootEmpty": false,
          "_timeout": 48000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 48000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}